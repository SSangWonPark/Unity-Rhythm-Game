// 노트 하나에 대한 정보
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Note : MonoBehaviour
{
    public float noteSpeed = 400;
    UnityEngine.UI.Image noteImage;    

    void Start()
    {
        noteImage = GetComponent<UnityEngine.UI.Image>();
    }

    // 노트 이미지 제거
    public void HideNote()
    {
        noteImage.enabled = false;
    }

    void Update()
    {
        transform.localPosition += Vector3.right * noteSpeed * Time.deltaTime;
    }
}

// 노트 생성
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class NoteManager : MonoBehaviour
{
    public int bpm = 0; // 리듬게임 비트 단위. 1분당 몇 비트인지.
    double currentTime = 0d; // 리듬 게임은 오차 적은게 중요해서 float보단 double

    [SerializeField] Transform tfNoteAppear = null; // 노트 생성 위치 오브젝트
    [SerializeField] GameObject goNote = null; // 생성할 노트 프리팹

    TimingManager theTimingManager;   // TimingManager 참조

    void Start()
    {
        theTimingManager = GetComponent<TimingManager>();
    }

    // Update is called once per frame
    void Update()
    {
        currentTime += Time.deltaTime;

        if (currentTime >= 60d / bpm) // 60s / bpm <= 1 Beat 시간 ex) 60/120 1beat 당 0.5초
        {
            GameObject t_note = Instantiate(goNote, tfNoteAppear.position, Quaternion.identity);    // 노트 생성
            t_note.transform.SetParent(this.transform); // 객체로 부모로 설정

            theTimingManager.boxNoteList.Add(t_note);   // 노트 생성 시, 리스트에 추가

            currentTime -= 60d / bpm;    // 시간 초기화, currentTime이 정확히 0.5초가 아니라 0으로 하지 않음
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.CompareTag("Note"))
        {
            theTimingManager.boxNoteList.Remove(collision.gameObject);   // 노트 파괴 시, 리스트에서 제거
            Destroy(collision.gameObject);    
        }
    }
}
